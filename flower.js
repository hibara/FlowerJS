// Generated by CoffeeScript 1.4.0

/*
 "flower.js"

   paints 2D various kinds of flower shapes with using 'HTML5 Canvas'.
   This script don't use image files ( bmp/jpg/png and so on) at all,
   creates 2D flower shapes with line, pure color and gradation only.
   If you change various parameters or set random parameters,
   various kinds of flowers would bloom out on your browser!

 Try it demos.

 Simple Demo.
 http://hibara.org/software/flowerjs/

 Web service with flower.js
 http://hanacanvas.net/

 Copyright (C) 2013 M.Hibara, All rights reserved.
 http://hibara.org/

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or (at
 your option) any later version.

 This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program. If not, see

 http://www.gnu.org/licenses/
*/


(function() {
  var FlowerJS;

  FlowerJS = (function() {

    FlowerJS.prototype.FlowerCanvas = null;

    FlowerJS.prototype.drawingContext = null;

    FlowerJS.prototype.flowerCurrent = null;

    FlowerJS.prototype.flowerPink = null;

    FlowerJS.prototype.flowerBlue = null;

    FlowerJS.prototype.flowerOrange = null;

    FlowerJS.prototype.flowerYellow = null;

    function FlowerJS() {
      this.createCanvas();
      this.resizeCanvas();
      this.createDrawingContext();
      this.initFlowers();
      this.bloomFlowers(256, 256);
    }

    FlowerJS.prototype.createCanvas = function() {
      var _this = this;
      this.FlowerCanvas = document.createElement('canvas');
      document.body.appendChild(this.FlowerCanvas);
      return this.FlowerCanvas.addEventListener('click', function(e) {
        var mouseX, mouseY, rect;
        rect = e.target.getBoundingClientRect();
        if (e.offsetX) {
          mouseX = e.offsetX - rect.left;
          mouseY = e.offsetY - rect.top;
        } else if (e.layerX) {
          mouseX = e.layerX - rect.left;
          mouseY = e.layerY - rect.top;
        }
        return _this.bloomFlowers(mouseX, mouseY);
      }, false);
    };

    /*
      Canvas size
    */


    FlowerJS.prototype.resizeCanvas = function() {
      this.FlowerCanvas.height = 512;
      return this.FlowerCanvas.width = 512;
    };

    /*
      Create 2d Context
    */


    FlowerJS.prototype.createDrawingContext = function() {
      return this.drawingContext = this.FlowerCanvas.getContext('2d');
    };

    /*
      Create flower object.
    */


    FlowerJS.prototype.createFlower = function(ptlsNum, ptlsLen, subpos1x, subpos1y, subpos2x, subpos2y, col1R, col1G, col1B, col2R, col2G, col2B, col3R, col3G, col3B) {
      return {
        ptlsNum: Number(ptlsNum),
        ptlsLen: Number(ptlsLen),
        subpos1x: Number(subpos1x),
        subpos1y: Number(subpos1y),
        subpos2x: Number(subpos2x),
        subpos2y: Number(subpos2y),
        col1R: Number(col1R),
        col1G: Number(col1G),
        col1B: Number(col1B),
        col2R: Number(col2R),
        col2G: Number(col2G),
        col2B: Number(col2B),
        col3R: Number(col3R),
        col3G: Number(col3G),
        col3B: Number(col3B)
      };
    };

    /*
      A random kind of Some flowers are blooming in starting.
    */


    FlowerJS.prototype.initFlowers = function() {
      var initNum;
      this.flowerPink = this.createFlower(8, 16, 16, -8, 4, -4, 255, 80, 80, 255, 188, 180, 255, 230, 230);
      this.flowerBlue = this.createFlower(6, 32, 16, -6, -16, -10, 200, 200, 255, 0, 0, 255, 180, 180, 255);
      this.flowerOrange = this.createFlower(5, 24, 0, -1, -10, -14, 255, 160, 80, 255, 220, 180, 255, 245, 230);
      this.flowerYellow = this.createFlower(24, 48, 0, 8, -10, -14, 230, 230, 80, 255, 170, 55, 255, 255, 160);
      initNum = this.randRange(0, 3);
      switch (initNum) {
        case 1:
          return this.flowerCurrent = this.flowerBlue;
        case 2:
          return this.flowerCurrent = this.flowerOrange;
        case 3:
          return this.flowerCurrent = this.flowerYellow;
        default:
          return this.flowerCurrent = this.flowerPink;
      }
    };

    /*
      Some flowers are blooming.
    */


    FlowerJS.prototype.bloomFlowers = function(posx, posy) {
      var addnum, i, px, py, _i;
      addnum = this.randRange(4, 8);
      for (i = _i = 0; 0 <= addnum ? _i < addnum : _i > addnum; i = 0 <= addnum ? ++_i : --_i) {
        px = this.randRange(posx - 54, posx + 54);
        py = this.randRange(posy - 54, posy + 54);
        this.aFlower(px, py, this.flowerCurrent);
      }
      return this.mutateFlower();
    };

    /*
      Mutatie current flower.
    */


    FlowerJS.prototype.mutateFlower = function() {
      var num;
      num = this.randRange(0, 15);
      switch (num) {
        case 0:
          return this.flowerCurrent.ptlsNum = this.normalDistribution(flowerCurrent.ptlsNum, 4);
        case 1:
          return this.flowerCurrent.ptlsLen = this.normalDistribution(flowerCurrent.ptlsLen, 4);
        case 2:
          return this.flowerCurrent.subpos1x = this.normalDistribution(flowerCurrent.subpos1x, 2);
        case 3:
          return this.flowerCurrent.subpos1y = this.normalDistribution(flowerCurrent.subpos1y, 2);
        case 4:
          return this.flowerCurrent.subpos2x = this.normalDistribution(flowerCurrent.subpos2x, 2);
        case 5:
          return this.flowerCurrent.subpos2y = this.normalDistribution(flowerCurrent.subpos2y, 2);
        case 6:
          return this.flowerCurrent.col1R = this.colorMutation(this.flowerCurrent.col1R);
        case 7:
          return this.flowerCurrent.col1G = this.colorMutation(this.flowerCurrent.col1G);
        case 8:
          return this.flowerCurrent.col1B = this.colorMutation(this.flowerCurrent.col1B);
        case 9:
          return this.flowerCurrent.col2R = this.colorMutation(this.flowerCurrent.col2R);
        case 10:
          return this.flowerCurrent.col2G = this.colorMutation(this.flowerCurrent.col2G);
        case 11:
          return this.flowerCurrent.col2B = this.colorMutation(this.flowerCurrent.col2B);
        case 13:
          return this.flowerCurrent.col3R = this.colorMutation(this.flowerCurrent.col3R);
        case 14:
          return this.flowerCurrent.col3G = this.colorMutation(this.flowerCurrent.col3G);
        case 15:
          return this.flowerCurrent.col3B = this.colorMutation(this.flowerCurrent.col3B);
      }
    };

    /*
      Mutate flower's petals color
    */


    FlowerJS.prototype.colorMutation = function(colval) {
      colval = this.normalDistribution(colval, 30);
      if (colval > 255) {
        return colval = 255;
      } else if (colval < 0) {
        return colval = 0;
      } else {
        return colval;
      }
    };

    /*
      A flower is open
    */


    FlowerJS.prototype.aFlower = function(posx, posy, objFlw) {
      var Size, TransParent, angle, col1, col2, col3, grad, grad_r, i, n0, n1, p0x, p0y, p1_r, p1x, p1y, p2_r, p2x, p2y, p3_r, p3x, p3y, p4_r, p4x, p4y, p5_r, p5x, p5y, petalsNum, radian, _i, _results;
      p0x = posx;
      p0y = posy;
      petalsNum = objFlw.ptlsNum;
      p3x = p0x + objFlw.ptlsLen;
      p3y = p0y;
      p1x = p0x + objFlw.subpos1x;
      p1y = p0y + objFlw.subpos1y;
      p2x = p3x + objFlw.subpos2x;
      p2y = p3y + objFlw.subpos2y;
      p4x = p3x + objFlw.subpos2x;
      p4y = p3y - objFlw.subpos2y;
      p5x = p0x + objFlw.subpos1x;
      p5y = p0y - objFlw.subpos1y;
      col1 = 'rgb(' + objFlw.col1R + ',' + objFlw.col1G + ',' + objFlw.col1B + ')';
      col2 = 'rgb(' + objFlw.col2R + ',' + objFlw.col2G + ',' + objFlw.col2B + ')';
      col3 = 'rgb(' + objFlw.col3R + ',' + objFlw.col3G + ',' + objFlw.col3B + ')';
      TransParent = 1;
      Size = 1;
      this.drawingContext.lineWidth = 2;
      this.drawingContext.globalAlpha = TransParent;
      this.drawingContext.scale(Size, Size);
      n0 = 0;
      n1 = 1;
      angle = 0;
      _results = [];
      for (i = _i = 0; 0 <= petalsNum ? _i < petalsNum : _i > petalsNum; i = 0 <= petalsNum ? ++_i : --_i) {
        if (i > Math.ceil(petalsNum / 2) - 1) {
          angle = (360 / petalsNum) * n1;
          n1 = n1 + 2;
        } else {
          angle = (360 / petalsNum) * n0;
          n0 = n0 + 2;
        }
        radian = angle * Math.PI / 180;
        this.drawingContext.beginPath();
        grad_r = this.rotatePosition(radian, p0x, p0y, p3x, p3y);
        grad = this.drawingContext.createLinearGradient(p0x, p0y, grad_r.x, grad_r.y);
        /*
               gradation samples
               grad.addColorStop(0,'rgb(192, 80, 77)');    // red
               grad.addColorStop(0.5,'rgb(155, 187, 89)'); // green
               grad.addColorStop(1,'rgb(128, 100, 162)');  // purple
        */

        grad.addColorStop(0, col1);
        grad.addColorStop(0.5, col2);
        grad.addColorStop(1, col3);
        this.drawingContext.fillStyle = grad;
        p1_r = this.rotatePosition(radian, p0x, p0y, p1x, p1y);
        p2_r = this.rotatePosition(radian, p0x, p0y, p2x, p2y);
        p3_r = this.rotatePosition(radian, p0x, p0y, p3x, p3y);
        p4_r = this.rotatePosition(radian, p0x, p0y, p4x, p4y);
        p5_r = this.rotatePosition(radian, p0x, p0y, p5x, p5y);
        this.drawingContext.moveTo(p0x, p0y);
        this.drawingContext.bezierCurveTo(p1_r.x, p1_r.y, p2_r.x, p2_r.y, p3_r.x, p3_r.y);
        this.drawingContext.bezierCurveTo(p4_r.x, p4_r.y, p5_r.x, p5_r.y, p0x, p0y);
        this.drawingContext.closePath();
        this.drawingContext.stroke();
        _results.push(this.drawingContext.fill());
      }
      return _results;
    };

    /*
      Random numbers in range
    */


    FlowerJS.prototype.randRange = function(minnum, maxnum) {
      var randVal;
      randVal = Math.round(Math.random() * (maxnum - minnum)) + minnum;
      return randVal;
    };

    /*
      Calc rotation points
    */


    FlowerJS.prototype.rotatePosition = function(radian, cx, cy, x1, y1) {
      return {
        x: (x1 - cx) * Math.cos(-radian) - (y1 - cy) * Math.sin(-radian) + cx,
        y: (x1 - cx) * Math.sin(-radian) + (y1 - cy) * Math.cos(-radian) + cy
      };
    };

    /*
      Get random number with Norma distribution
    */


    FlowerJS.prototype.normalDistribution = function(value, range) {
      var a, b, c;
      a = 1 - Math.random();
      b = 1 - Math.random();
      c = Math.sqrt(-2 * Math.log(a));
      if (0.5 - Math.random() > 0) {
        value = Math.floor(c * Math.sin(Math.PI * 2 * b) * range + value);
      } else {
        value = Math.floor(c * Math.cos(Math.PI * 2 * b) * range + value);
      }
      return value;
    };

    return FlowerJS;

  })();

  window.FlowerJS = FlowerJS;

}).call(this);
